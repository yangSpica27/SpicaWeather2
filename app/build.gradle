import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'com.android.application'
    id 'com.didiglobal.booster'
    id 'org.jetbrains.kotlin.android'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-android'
    id 'kotlin-parcelize'
//    id 'AndResGuard'
    id 'com.google.devtools.ksp'
}

android {
    namespace 'me.spica.weather2'
    compileSdk 34

    defaultConfig {
        applicationId "me.spica.weather"
        minSdk 26
        targetSdk 34
        versionCode 6
        versionName "1.03"

        renderscriptTargetApi 24
        renderscriptSupportModeEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resourceConfigurations += ['en']

        ndk {
            //设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
            abiFilters "arm64-v8a"
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        buildConfigField 'String', 'CAIYUN', quotWrapper("mOQ3KNVG1rXoCH75")
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    signingConfigs {
        signingConfig {
            storeFile rootProject.file("key.jks")
            storePassword 'SPICa27'
            keyAlias 'wuqi'
            keyPassword 'SPICa27'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.signingConfig
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            //            shrinkResources true
            signingConfig signingConfigs.signingConfig
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    //    compileOptions {
    //        sourceCompatibility JavaVersion.VERSION_17
    //        targetCompatibility JavaVersion.VERSION_17
    //    }

    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlin.time.ExperimentalTime"]
        kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
        //        useK2 = true
    }
    namespace 'me.spica.spicaweather2'
    lint {
        abortOnError false
        checkReleaseBuilds false
    }
}

static String quotWrapper(key) {
    if (key == null) {
        return "\"\""
    }
    return "\"".concat(key).concat("\"")
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api "dev.rikka.rikkax.core:core:1.4.1"
    api platform('org.jetbrains.kotlin:kotlin-bom:1.9.0')
    api "dev.rikka.rikkax.appcompat:appcompat:1.6.1"
    api "dev.rikka.rikkax.widget:borderview:1.1.0"
    api "dev.rikka.rikkax.layoutinflater:layoutinflater:1.3.0"
    api "dev.rikka.rikkax.material:material:2.7.0"
    api "dev.rikka.rikkax.material:material-preference:2.0.0"
    api "dev.rikka.rikkax.recyclerview:recyclerview-ktx:1.3.2"
    api "dev.rikka.rikkax.preference:simplemenu-preference:1.0.3"
    // 生命周期+协程
    api 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2'
    api 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.2'
    api 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.2'

    // activity & fragment ktx
    api 'androidx.fragment:fragment-ktx:1.6.2'
    api 'androidx.activity:activity-ktx:1.8.1'

    // 协程支持
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'

    // App startup
    api "androidx.startup:startup-runtime:1.1.1"
    // Timber 日志
    api 'com.jakewharton.timber:timber:5.0.1'

    // App startup
    api "androidx.startup:startup-runtime:1.1.1"
    api 'com.drakeet.multitype:multitype:4.3.0'

    //Json解析
    implementation 'com.squareup.moshi:moshi-kotlin:1.15.1'
    ksp 'com.squareup.moshi:moshi-kotlin-codegen:1.15.1'

    //network 网络请求相关
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.11'
    implementation("com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.11")
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-moshi:2.9.0"
    implementation "com.github.skydoves:sandwich-retrofit:2.0.5"

    def roomVersion = "2.6.1"
    implementation("androidx.room:room-runtime:$roomVersion")
    ksp("androidx.room:room-compiler:$roomVersion")
    implementation("androidx.room:room-ktx:$roomVersion")

    implementation "com.github.fondesa:recycler-view-divider:3.5.0"

    implementation 'com.github.SilenceDut:jpinyin:v1.0'

    // hilt
    implementation 'com.google.dagger:hilt-android:2.48'
    ksp 'com.google.dagger:hilt-compiler:2.48'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.14'

    implementation 'com.airbnb.android:lottie:6.0.0'
    implementation("io.coil-kt:coil:2.5.0")
    implementation 'com.tbuonomo:dotsindicator:5.0'
    implementation 'com.google.android.flexbox:flexbox:3.0.0'

    implementation("org.greenrobot:eventbus:3.3.1")
    implementation("androidx.palette:palette:1.0.0")

//    configurations { natives }
//    implementation 'com.badoo.mobile:android-weak-handler:1.1'
//    implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
//    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
//    implementation "com.badlogicgames.gdx:gdx-box2d:$box2dVersion"
//    natives "com.badlogicgames.gdx:gdx-box2d-platform:$box2dVersion:natives-arm64-v8a"
//    implementation "com.esotericsoftware.spine:spine-libgdx:4.1.0"
}

//kapt {
//    correctErrorTypes true
//}

configurations.configureEach {
    exclude group: 'androidx.appcompat', module: 'appcompat'
}

//andResGuard {
//    mappingFile = null
//    use7zip = true
//    useSign = true
//    // 打开这个开关，会keep住所有资源的原始路径，只混淆资源的名字
//    keepRoot = false
//    // 设置这个值，会把arsc name列混淆成相同的名字，减少string常量池的大小
//    fixedResName = "arg"
//    // 打开这个开关会合并所有哈希值相同的资源，但请不要过度依赖这个功能去除去冗余资源
//    mergeDuplicatedRes = true
//    compressFilePattern = ["*.png",
//                           "*.jpg",
//                           "*.jpeg",
//                           "*.gif",]
//    sevenzip {
//        artifact = 'com.tencent.mm:SevenZip:1.2.21'
//    }
//}

configurations {
    ktlint
}

dependencies {
    ktlint 'com.pinterest.ktlint:ktlint-cli:1.3.1'
}
tasks.register('ktlint', JavaExec) {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    mainClass = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
}
check.dependsOn ktlint

tasks.register('ktlintFormat', JavaExec) {
    group = "formatting"
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    mainClass = "com.pinterest.ktlint.Main"
//    jvmArgs = "--add-opens=java.base/java.lang=ALL-UNNAMED"
    args "-F", "src/**/*.kt", "**.kts", "!**/build/**"
}

//tasks.register('copyAndroidNatives') {
//    doFirst {
//        file("libs/armeabi/").mkdirs()
//        file("libs/armeabi-v7a/").mkdirs()
//        file("libs/arm64-v8a/").mkdirs()
//        file("libs/x86_64/").mkdirs()
//        file("libs/x86/").mkdirs()
//
//        configurations.natives.files.each { jar ->
//            def outputDir = null
//            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
//            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
//            if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
//            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
//            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
//            if (outputDir != null) {
//                copy {
//                    from zipTree(jar)
//                    into outputDir
//                    include "*.so"
//                }
//            }
//        }
//    }
//}

//tasks.configureEach { packageTask ->
//    if (packageTask.name.contains("package")) {
//        packageTask.dependsOn 'copyAndroidNatives'
//    }
//}



