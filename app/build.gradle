import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'AndResGuard'
}

android {
    compileSdk 34

    defaultConfig {
        applicationId "me.spica.weather2"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "0.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resConfigs 'en'

        ndk {
            //设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
            abiFilters "arm64-v8a"
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        buildConfigField 'String', 'CAIYUN', quotWrapper("mOQ3KNVG1rXoCH75")
    }

    signingConfigs {
        signingConfig {
            storeFile rootProject.file("key.jks")
            storePassword 'SPICa27'
            keyAlias 'wuqi'
            keyPassword 'SPICa27'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.signingConfig
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            //            shrinkResources true
            signingConfig signingConfigs.signingConfig
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }

    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlin.time.ExperimentalTime"]
        kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"]
    }

    kotlinOptions {
        jvmTarget = '11'
    }
}

static String quotWrapper(key) {
    if (key == null) {
        return "\"\""
    }
    return "\"".concat(key).concat("\"")
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(":persistence")
    implementation project(":base")
    implementation project(":network")
    implementation project(":weather")
    implementation project(":manager_city")
    implementation project(":setting")

    // hilt
    implementation 'com.google.dagger:hilt-android:2.44'
    kapt 'com.google.dagger:hilt-compiler:2.44'
}

kapt {
    correctErrorTypes true
}

andResGuard {
    mappingFile = null
    use7zip = true
    useSign = true
    // 打开这个开关，会keep住所有资源的原始路径，只混淆资源的名字
    keepRoot = false
    // 设置这个值，会把arsc name列混淆成相同的名字，减少string常量池的大小
    fixedResName = "arg"
    // 打开这个开关会合并所有哈希值相同的资源，但请不要过度依赖这个功能去除去冗余资源
    mergeDuplicatedRes = true
    compressFilePattern = ["*.png",
                           "*.jpg",
                           "*.jpeg",
                           "*.gif",]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.21'
    }
}

configurations {
    ktlint
}

dependencies {
    implementation project(':persistence')
    ktlint 'com.pinterest:ktlint:0.44.0'
}
task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}